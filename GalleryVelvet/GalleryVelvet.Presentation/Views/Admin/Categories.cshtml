@model GalleryVelvet.Presentation.Models.Admin.CategoriesAdminViewModel

@{
    Layout = "_Layout";
    ViewData["Title"] = "Управление категориями";
}

<style>
    .admin-page {
        padding: 30px 20px;
        max-width: 1200px;
        margin: 0 auto;
        min-height: calc(100vh - 70px);
        background: #f8f9fa;
    }

    .admin-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        background: white;
        padding: 25px 30px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .admin-title {
        font-size: 28px;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
    }

    .admin-breadcrumb {
        font-size: 14px;
        color: #6c757d;
    }

    .admin-breadcrumb a {
        color: #3498db;
        text-decoration: none;
    }

    .admin-breadcrumb a:hover {
        text-decoration: underline;
    }

    .header-actions {
        display: flex;
        gap: 15px;
    }

    .create-btn {
        padding: 12px 25px;
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
        text-decoration: none;
        border-radius: 8px;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: all 0.3s ease;
    }

    .create-btn:hover {
        background: linear-gradient(135deg, #2ecc71, #27ae60);
        color: white;
        text-decoration: none;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
    }

    .admin-filters {
        background: white;
        padding: 25px 30px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }

    .filters-row {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 20px;
        align-items: end;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
    }

    .filter-label {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .filter-input {
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .filter-input:focus {
        outline: none;
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }

    .filter-btn {
        padding: 12px 25px;
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .filter-btn:hover {
        background: linear-gradient(135deg, #2980b9, #3498db);
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
    }

    .categories-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 25px;
    }

    .category-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        overflow: hidden;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

    .category-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        border-color: #3498db;
    }

    .category-header {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        padding: 20px 25px;
        position: relative;
        overflow: hidden;
    }

    .category-header::before {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        width: 100px;
        height: 100px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        transform: translate(30px, -30px);
    }

    .category-icon {
        width: 50px;
        height: 50px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        margin-bottom: 15px;
        position: relative;
        z-index: 1;
    }

    .category-name {
        font-size: 20px;
        font-weight: 700;
        margin: 0;
        position: relative;
        z-index: 1;
    }

    .category-body {
        padding: 25px;
    }

    .category-description {
        color: #6c757d;
        line-height: 1.6;
        margin-bottom: 20px;
        font-size: 14px;
    }

    .category-description.empty {
        font-style: italic;
        opacity: 0.7;
    }

    .category-stats {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        margin-bottom: 20px;
    }

    .stat-item {
        text-align: center;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #e9ecef;
    }

    .stat-number {
        font-size: 24px;
        font-weight: 700;
        color: #2c3e50;
        display: block;
        margin-bottom: 5px;
    }

    .stat-label {
        font-size: 12px;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .category-actions {
        display: flex;
        gap: 10px;
    }

    .action-btn {
        flex: 1;
        padding: 10px 15px;
        border: none;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 600;
        cursor: pointer;
        text-decoration: none;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 6px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .action-btn-edit {
        background: #f39c12;
        color: white;
    }

    .action-btn-edit:hover {
        background: #e67e22;
        color: white;
        text-decoration: none;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
    }

    .action-btn-delete {
        background: #e74c3c;
        color: white;
    }

    .action-btn-delete:hover {
        background: #c0392b;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
    }

    .empty-state {
        text-align: center;
        padding: 80px 30px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        grid-column: 1 / -1;
    }

    .empty-state-icon {
        font-size: 64px;
        margin-bottom: 25px;
        opacity: 0.5;
    }

    .empty-state-text {
        font-size: 24px;
        margin-bottom: 15px;
        color: #2c3e50;
        font-weight: 600;
    }

    .empty-state-subtext {
        font-size: 16px;
        opacity: 0.7;
        color: #6c757d;
        margin-bottom: 30px;
    }

    .pagination {
        margin-top: 40px;
        display: flex;
        justify-content: center;
        gap: 10px;
    }

    .pagination-link {
        padding: 10px 15px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        color: #3498db;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .pagination-link:hover {
        background: #3498db;
        color: white;
        text-decoration: none;
        border-color: #3498db;
    }

    .pagination-link.active {
        background: #3498db;
        color: white;
        border-color: #3498db;
    }

    .pagination-link.disabled {
        color: #6c757d;
        background: #f8f9fa;
        cursor: not-allowed;
        border-color: #e9ecef;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        font-weight: 500;
    }

    .alert-success {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }

    .alert-danger {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }

    @@media (max-width: 768px) {
        .admin-page {
            padding: 20px 15px;
        }

        .admin-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }

        .header-actions {
            width: 100%;
            justify-content: center;
        }

        .filters-row {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .categories-grid {
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .category-stats {
            grid-template-columns: 1fr;
        }

        .category-actions {
            flex-direction: column;
        }
    }

    .fade-in {
        animation: fadeInUp 0.6s ease-out;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<main class="admin-page">
    <div class="admin-header fade-in">
        <div>
            <h1 class="admin-title">Управление категориями</h1>
            <div class="admin-breadcrumb">
                <a href="@Url.Action("Index", "Admin")">Главная</a> / Категории
            </div>
        </div>
        <div class="header-actions">
            <a href="@Url.Action("CreateCategory", "Admin")" class="create-btn">
                ➕ Создать категорию
            </a>
        </div>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success fade-in">
            @TempData["Success"]
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger fade-in">
            @TempData["Error"]
        </div>
    }

    <form method="get" class="admin-filters fade-in">
        <div class="filters-row">
            <div class="filter-group">
                <label class="filter-label">Поиск категорий</label>
                <input type="text" name="searchTerm" value="@Model.SearchTerm" 
                       class="filter-input" placeholder="Введите название категории...">
            </div>

            <div class="filter-group">
                <button type="submit" class="filter-btn">
                    🔍 Поиск
                </button>
            </div>
        </div>
    </form>

    <div class="categories-grid">
        @if (Model.Categories.Any())
        {
            @foreach (var category in Model.Categories)
            {
                <div class="category-card fade-in" style="animation-delay: @(Model.Categories.ToList().IndexOf(category) * 0.1)s;">
                    <div class="category-header">
                        <div class="category-icon">
                            📂
                        </div>
                        <h3 class="category-name">@category.Name</h3>
                    </div>
                    
                    <div class="category-body">
                        <div class="category-stats">
                            <div class="stat-item">
                                <span class="stat-number">@(category.Products?.Count ?? 0)</span>
                                <span class="stat-label">Товаров</span>
                            </div>
                        </div>

                        <div class="category-actions">
                            <a href="@Url.Action("EditCategory", "Admin", new { id = category.Id })" 
                               class="action-btn action-btn-edit">
                                ✏️ Редактировать
                            </a>
                            
                            <form asp-action="DeleteCategory" asp-route-id="@category.Id" method="post" 
                                  style="flex: 1;" onsubmit="return confirmDelete('@category.Name')">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="action-btn action-btn-delete" style="width: 100%;">
                                    🗑️ Удалить
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-icon">📂</div>
                <div class="empty-state-text">Категории не найдены</div>
                <div class="empty-state-subtext">
                    @if (!string.IsNullOrWhiteSpace(Model.SearchTerm))
                    {
                        <text>По запросу "@Model.SearchTerm" ничего не найдено. Попробуйте изменить поисковый запрос.</text>
                    }
                    else
                    {
                        <text>В системе пока нет категорий. Создайте первую категорию для начала работы.</text>
                    }
                </div>
                
                @if (string.IsNullOrWhiteSpace(Model.SearchTerm))
                {
                    <a href="@Url.Action("CreateCategory", "Admin")" class="create-btn">
                        ➕ Создать первую категорию
                    </a>
                }
            </div>
        }
    </div>

    @if (Model.Categories.MetaData.TotalPages > 1)
    {
        <div class="pagination">
            @if (Model.Categories.MetaData.HasPrevious)
            {
                <a href="@Url.Action("Categories", "Admin", new { 
                    pageNumber = Model.Categories.MetaData.CurrentPage - 1,
                    searchTerm = Model.SearchTerm
                })" class="pagination-link">← Назад</a>
            }
            else
            {
                <span class="pagination-link disabled">← Назад</span>
            }

            @for (int i = Math.Max(1, Model.Categories.MetaData.CurrentPage - 2); 
                  i <= Math.Min(Model.Categories.MetaData.TotalPages, Model.Categories.MetaData.CurrentPage + 2); 
                  i++)
            {
                if (i == Model.Categories.MetaData.CurrentPage)
                {
                    <span class="pagination-link active">@i</span>
                }
                else
                {
                    <a href="@Url.Action("Categories", "Admin", new { 
                        pageNumber = i,
                        searchTerm = Model.SearchTerm
                    })" class="pagination-link">@i</a>
                }
            }

            @if (Model.Categories.MetaData.HasNext)
            {
                <a href="@Url.Action("Categories", "Admin", new { 
                    pageNumber = Model.Categories.MetaData.CurrentPage + 1,
                    searchTerm = Model.SearchTerm
                })" class="pagination-link">Вперед →</a>
            }
            else
            {
                <span class="pagination-link disabled">Вперед →</span>
            }
        </div>
    }
</main>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.querySelector('input[name="searchTerm"]');
        let searchTimeout;
        
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    this.form.submit();
                }, 500);
            });
        }
        
        const categoryCards = document.querySelectorAll('.category-card');
        categoryCards.forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-8px) scale(1.02)';
            });

            card.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0) scale(1)';
            });
        });

        console.log('Страница управления категориями загружена');
    });

    function confirmDelete(categoryName) {
        return confirm(`Вы уверены, что хотите удалить категорию "${categoryName}"?\n\nВнимание: это действие нельзя отменить.`);
    }
</script>