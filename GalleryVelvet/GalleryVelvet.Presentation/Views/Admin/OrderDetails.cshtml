@model GalleryVelvet.Presentation.Models.Admin.OrderDetailsAdminViewModel

@{
    Layout = "_Layout";
    ViewData["Title"] = "–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞";
    var totalAmount = Model.Order.OrderItems.Sum(oi => (oi.Product.DiscountPrice ?? oi.Product.Price) * oi.Quantity);
}

<style>
    .admin-page {
        padding: 30px 20px;
        max-width: 1200px;
        margin: 0 auto;
        min-height: calc(100vh - 70px);
        background: #f8f9fa;
    }

    .admin-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        background: white;
        padding: 25px 30px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .admin-title {
        font-size: 28px;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
    }

    .admin-breadcrumb {
        font-size: 14px;
        color: #6c757d;
    }

    .admin-breadcrumb a {
        color: #3498db;
        text-decoration: none;
    }

    .admin-breadcrumb a:hover {
        text-decoration: underline;
    }

    .order-layout {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 30px;
    }

    .order-main {
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    .order-sidebar {
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    .order-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .card-header {
        background: linear-gradient(135deg, #34495e, #2c3e50);
        color: white;
        padding: 20px 25px;
        font-size: 18px;
        font-weight: 600;
    }

    .card-body {
        padding: 25px;
    }

    .order-info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 25px;
    }

    .info-item {
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #3498db;
    }

    .info-label {
        font-size: 12px;
        font-weight: 600;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 5px;
    }

    .info-value {
        font-size: 16px;
        font-weight: 600;
        color: #2c3e50;
    }

    .status-form {
        background: #fff3cd;
        border: 2px solid #ffeaa7;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .status-form h4 {
        color: #856404;
        margin-bottom: 15px;
        font-size: 16px;
        font-weight: 600;
    }

    .status-select-group {
        display: flex;
        gap: 15px;
        align-items: end;
    }

    .status-select {
        flex: 1;
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 14px;
        background: white;
    }

    .status-btn {
        padding: 12px 25px;
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .status-btn:hover {
        background: linear-gradient(135deg, #2ecc71, #27ae60);
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
    }

    .order-items-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .order-item {
        display: flex;
        gap: 20px;
        align-items: center;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        border: 1px solid #e9ecef;
        transition: all 0.3s ease;
    }

    .order-item:hover {
        background: white;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }

    .item-image {
        width: 80px;
        height: 100px;
        object-fit: cover;
        border-radius: 8px;
        flex-shrink: 0;
        border: 2px solid #e9ecef;
    }

    .item-details {
        flex: 1;
    }

    .item-name {
        font-size: 16px;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
    }

    .item-info {
        font-size: 14px;
        color: #6c757d;
        margin-bottom: 8px;
        line-height: 1.5;
    }

    .item-price {
        font-size: 16px;
        font-weight: 700;
        color: #27ae60;
    }

    .order-summary {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border: 2px solid #dee2e6;
        border-radius: 10px;
        padding: 25px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 0;
        border-bottom: 1px solid #dee2e6;
    }

    .summary-row:last-child {
        border-bottom: none;
        border-top: 2px solid #2c3e50;
        margin-top: 15px;
        padding-top: 20px;
        font-size: 20px;
        font-weight: 700;
        color: #2c3e50;
    }

    .summary-label {
        font-weight: 600;
        color: #6c757d;
    }

    .summary-value {
        font-weight: 600;
        color: #2c3e50;
    }

    .customer-info {
        padding: 20px;
        background: linear-gradient(135deg, #e8f5e8, #d4edda);
        border-radius: 10px;
        border: 2px solid #c3e6cb;
    }

    .customer-name {
        font-size: 18px;
        font-weight: 700;
        color: #155724;
        margin-bottom: 15px;
    }

    .customer-detail {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 10px;
        font-size: 14px;
        color: #155724;
    }

    .customer-detail:last-child {
        margin-bottom: 0;
    }

    .customer-icon {
        width: 20px;
        text-align: center;
    }

    .comments-section {
        background: #fff3cd;
        border: 2px solid #ffeaa7;
        border-radius: 10px;
        padding: 20px;
    }

    .comments-title {
        color: #856404;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .comments-text {
        color: #856404;
        line-height: 1.6;
        font-style: italic;
    }

    .status-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-block;
    }

    .status-processing {
        background: #fff3cd;
        color: #856404;
        border: 2px solid #ffeaa7;
    }

    .status-confirmed {
        background: #d4edda;
        color: #155724;
        border: 2px solid #c3e6cb;
    }

    .status-shipped {
        background: #cce5ff;
        color: #004085;
        border: 2px solid #b3d7ff;
    }

    .status-delivered {
        background: #d1ecf1;
        color: #0c5460;
        border: 2px solid #bee5eb;
    }

    .status-cancelled {
        background: #f8d7da;
        color: #721c24;
        border: 2px solid #f5c6cb;
    }

    .back-btn {
        padding: 12px 25px;
        background: linear-gradient(135deg, #95a5a6, #7f8c8d);
        color: white;
        text-decoration: none;
        border-radius: 8px;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: all 0.3s ease;
    }

    .back-btn:hover {
        background: linear-gradient(135deg, #7f8c8d, #95a5a6);
        color: white;
        text-decoration: none;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(149, 165, 166, 0.3);
    }

    .alert {
        padding: 15px 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        font-weight: 500;
    }

    .alert-success {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }

    .alert-danger {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }

    @@media (max-width: 768px) {
        .admin-page {
            padding: 20px 15px;
        }

        .order-layout {
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .order-info-grid {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .status-select-group {
            flex-direction: column;
            align-items: stretch;
        }

        .order-item {
            flex-direction: column;
            text-align: center;
        }

        .item-image {
            width: 100%;
            height: 200px;
            max-width: 200px;
        }

        .admin-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }
    }
</style>

<main class="admin-page">
    <div class="admin-header">
        <div>
            <h1 class="admin-title">–ó–∞–∫–∞–∑ #@Model.Order.Id.ToString("N")[..8].ToUpper()</h1>
            <div class="admin-breadcrumb">
                <a href="@Url.Action("Index", "Admin")">–ì–ª–∞–≤–Ω–∞—è</a> / 
                <a href="@Url.Action("Orders", "Admin")">–ó–∞–∫–∞–∑—ã</a> / 
                –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
            </div>
        </div>
        <div>
            <a href="@Url.Action("Orders", "Admin")" class="back-btn">
                ‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
            </a>
        </div>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">
            @TempData["Success"]
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">
            @TempData["Error"]
        </div>
    }

    <div class="order-layout">
        <div class="order-main">
            <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ -->
            <div class="order-card">
                <div class="card-header">
                    üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
                </div>
                <div class="card-body">
                    <div class="order-info-grid">
                        <div class="info-item">
                            <div class="info-label">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</div>
                            <div class="info-value">#@Model.Order.Id.ToString("N")[..8].ToUpper()</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</div>
                            <div class="info-value">@Model.Order.OrderDate.ToString("dd.MM.yyyy HH:mm")</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å</div>
                            <div class="info-value">
                                <span class="status-badge status-@Model.Order.OrderStatus.Name.ToLower().Replace(" ", "-")">
                                    @Model.Order.OrderStatus.Name
                                </span>
                            </div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">–û–±—â–∞—è —Å—É–º–º–∞</div>
                            <div class="info-value" style="color: #27ae60; font-size: 20px;">
                                @totalAmount.ToString("N0") BYN
                            </div>
                        </div>
                    </div>

                    <!-- –§–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ -->
                    <form asp-action="UpdateOrderStatus" asp-route-id="@Model.Order.Id" method="post" class="status-form">
                        @Html.AntiForgeryToken()
                        <h4>üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</h4>
                        <div class="status-select-group">
                            <select name="StatusId" class="status-select" required>
                                @foreach (var status in Model.OrderStatuses)
                                {
                                    <option value="@status.Id" selected="@(status.Id == Model.Order.OrderStatusId)">
                                        @status.Name
                                    </option>
                                }
                            </select>
                            <button type="submit" class="status-btn">
                                –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                            </button>
                        </div>
                    </form>

                    @if (!string.IsNullOrWhiteSpace(Model.Order.Comments))
                    {
                        <div class="comments-section">
                            <div class="comments-title">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</div>
                            <div class="comments-text">@Model.Order.Comments</div>
                        </div>
                    }
                </div>
            </div>

            <!-- –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ -->
            <div class="order-card">
                <div class="card-header">
                    üõçÔ∏è –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ (@Model.Order.OrderItems.Count —Ç–æ–≤–∞—Ä–∞)
                </div>
                <div class="card-body">
                    <div class="order-items-list">
                        @foreach (var item in Model.Order.OrderItems)
                        {
                            var product = item.Product;
                            var image = product.Images.FirstOrDefault()?.Image ?? "";
                            var format = product.Images.FirstOrDefault()?.Format ?? "jpeg";

                            var base64Src = string.IsNullOrWhiteSpace(image)
                                ? "/images/no-image_0.jpg"
                                : $"data:image/{format};base64,{image}";

                            var price = product.DiscountPrice ?? product.Price;
                            var itemTotal = price * item.Quantity;

                            <div class="order-item">
                                <img src="@base64Src" alt="@product.Name" class="item-image" />

                                <div class="item-details">
                                    <div class="item-name">@product.Name</div>
                                    <div class="item-info">
                                        <strong>–†–∞–∑–º–µ—Ä:</strong> @item.Size.Label<br />
                                        <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> @item.Quantity —à—Ç.<br />
                                        <strong>–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:</strong> @price.ToString("N0") BYN
                                    </div>
                                    <div class="item-price">
                                        –ò—Ç–æ–≥–æ: @itemTotal.ToString("N0") BYN
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="order-sidebar">
            <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ -->
            <div class="order-card">
                <div class="card-header">
                    üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
                </div>
                <div class="card-body">
                    <div class="customer-info">
                        <div class="customer-name">@Model.Order.FirstName @Model.Order.LastName</div>
                        
                        <div class="customer-detail">
                            <span class="customer-icon">üìß</span>
                            <span>@Model.Order.Email</span>
                        </div>
                        
                        <div class="customer-detail">
                            <span class="customer-icon">üì±</span>
                            <span>@Model.Order.PhoneNumber</span>
                        </div>
                        
                        <div class="customer-detail">
                            <span class="customer-icon">üë§</span>
                            <span>@Model.Order.User.Login</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É -->
            <div class="order-card">
                <div class="card-header">
                    üí∞ –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É
                </div>
                <div class="card-body">
                    <div class="order-summary">
                        <div class="summary-row">
                            <span class="summary-label">–¢–æ–≤–∞—Ä–æ–≤:</span>
                            <span class="summary-value">@Model.Order.OrderItems.Sum(oi => oi.Quantity) —à—Ç.</span>
                        </div>
                        
                        <div class="summary-row">
                            <span class="summary-label">–ü–æ–¥—ã—Ç–æ–≥:</span>
                            <span class="summary-value">@totalAmount.ToString("N0") BYN</span>
                        </div>
                        
                        <div class="summary-row">
                            <span class="summary-label">–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                            <span class="summary-value">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                        </div>
                        
                        <div class="summary-row">
                            <span>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</span>
                            <span>@totalAmount.ToString("N0") BYN</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const cards = document.querySelectorAll('.order-card');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                card.style.transition = 'all 0.6s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
        
        const statusForm = document.querySelector('.status-form');
        if (statusForm) {
            statusForm.addEventListener('submit', function(e) {
                const currentStatus = '@Model.Order.OrderStatus.Name';
                const newStatusSelect = this.querySelector('select[name="StatusId"]');
                const newStatusText = newStatusSelect.options[newStatusSelect.selectedIndex].text;
                
                if (currentStatus !== newStatusText) {
                    const confirmed = confirm(`–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —Å "${currentStatus}" –Ω–∞ "${newStatusText}"?`);
                    if (!confirmed) {
                        e.preventDefault();
                    }
                } else {
                    e.preventDefault();
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.');
                }
            });
        }

        console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    });
</script>