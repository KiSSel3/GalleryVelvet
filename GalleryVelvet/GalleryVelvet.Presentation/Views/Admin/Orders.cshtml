@model GalleryVelvet.Presentation.Models.Admin.OrdersAdminViewModel

@{
    Layout = "_Layout";
    ViewData["Title"] = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏";
}

<style>
    .admin-page {
        padding: 30px 20px;
        max-width: 1400px;
        margin: 0 auto;
        min-height: calc(100vh - 70px);
        background: #f8f9fa;
    }

    .admin-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        background: white;
        padding: 25px 30px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .admin-title {
        font-size: 28px;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
    }

    .admin-breadcrumb {
        font-size: 14px;
        color: #6c757d;
    }

    .admin-breadcrumb a {
        color: #3498db;
        text-decoration: none;
    }

    .admin-breadcrumb a:hover {
        text-decoration: underline;
    }

    .admin-filters {
        background: white;
        padding: 25px 30px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }

    .filters-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        align-items: end;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
    }

    .filter-label {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .filter-input {
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .filter-input:focus {
        outline: none;
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }

    .filter-btn {
        padding: 12px 25px;
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .filter-btn:hover {
        background: linear-gradient(135deg, #2980b9, #3498db);
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
    }

    .orders-table {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .table-header {
        background: linear-gradient(135deg, #34495e, #2c3e50);
        color: white;
        padding: 20px 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .table-title {
        font-size: 18px;
        font-weight: 600;
        margin: 0;
    }

    .table-count {
        font-size: 14px;
        opacity: 0.9;
    }

    .table-wrapper {
        overflow-x: auto;
    }

    .orders-grid {
        width: 100%;
        border-collapse: collapse;
    }

    .orders-grid th,
    .orders-grid td {
        padding: 15px 20px;
        text-align: left;
        border-bottom: 1px solid #e9ecef;
    }

    .orders-grid th {
        background: #f8f9fa;
        font-weight: 600;
        color: #2c3e50;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .orders-grid tr:hover {
        background: #f8f9fa;
    }

    .order-id {
        font-weight: 600;
        color: #3498db;
    }

    .order-customer {
        font-weight: 500;
        color: #2c3e50;
    }

    .order-date {
        color: #6c757d;
        font-size: 14px;
    }

    .order-total {
        font-weight: 600;
        color: #27ae60;
        font-size: 16px;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-processing {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }

    .status-confirmed {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-shipped {
        background: #cce5ff;
        color: #004085;
        border: 1px solid #b3d7ff;
    }

    .status-delivered {
        background: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }

    .status-cancelled {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
    }

    .action-btn {
        padding: 8px 12px;
        border: none;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 600;
        cursor: pointer;
        text-decoration: none;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

    .action-btn-view {
        background: #3498db;
        color: white;
    }

    .action-btn-view:hover {
        background: #2980b9;
        color: white;
        text-decoration: none;
        transform: translateY(-1px);
    }

    .pagination {
        padding: 20px 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f8f9fa;
        border-top: 1px solid #e9ecef;
    }

    .pagination-info {
        color: #6c757d;
        font-size: 14px;
    }

    .pagination-links {
        display: flex;
        gap: 8px;
    }

    .pagination-link {
        padding: 8px 12px;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        color: #3498db;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .pagination-link:hover {
        background: #3498db;
        color: white;
        text-decoration: none;
    }

    .pagination-link.active {
        background: #3498db;
        color: white;
        border-color: #3498db;
    }

    .pagination-link.disabled {
        color: #6c757d;
        background: #f8f9fa;
        cursor: not-allowed;
    }

    .empty-state {
        text-align: center;
        padding: 60px 30px;
        color: #6c757d;
    }

    .empty-state-icon {
        font-size: 48px;
        margin-bottom: 20px;
        opacity: 0.5;
    }

    .empty-state-text {
        font-size: 18px;
        margin-bottom: 10px;
    }

    .empty-state-subtext {
        font-size: 14px;
        opacity: 0.7;
    }

    @@media (max-width: 768px) {
        .admin-page {
            padding: 20px 15px;
        }

        .admin-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }

        .filters-row {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .table-wrapper {
            border-radius: 0;
        }

        .orders-grid th,
        .orders-grid td {
            padding: 10px 15px;
            font-size: 14px;
        }

        .action-buttons {
            flex-direction: column;
        }

        .pagination {
            flex-direction: column;
            gap: 15px;
        }
    }
</style>

<main class="admin-page">
    <div class="admin-header">
        <div>
            <h1 class="admin-title">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</h1>
            <div class="admin-breadcrumb">
                <a href="@Url.Action("Index", "Admin")">–ì–ª–∞–≤–Ω–∞—è</a> / –ó–∞–∫–∞–∑—ã
            </div>
        </div>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success" role="alert">
            @TempData["Success"]
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger" role="alert">
            @TempData["Error"]
        </div>
    }

    <form method="get" class="admin-filters">
        <div class="filters-row">
            <div class="filter-group">
                <label class="filter-label">–ü–æ–∏—Å–∫</label>
                <input type="text" name="searchTerm" value="@Model.SearchTerm" 
                       class="filter-input" placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, email, —Ç–µ–ª–µ—Ñ–æ–Ω—É...">
            </div>

            <div class="filter-group">
                <label class="filter-label">–°—Ç–∞—Ç—É—Å</label>
                <select name="statusId" class="filter-input">
                    <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                    @foreach (var status in Model.OrderStatuses)
                    {
                        <option value="@status.Id" selected="@(Model.SelectedStatusId == status.Id)">
                            @status.Name
                        </option>
                    }
                </select>
            </div>

            <div class="filter-group">
                <label class="filter-label">–î–∞—Ç–∞ –æ—Ç</label>
                <input type="date" name="fromDate" value="@Model.FromDate?.ToString("yyyy-MM-dd")" 
                       class="filter-input">
            </div>

            <div class="filter-group">
                <label class="filter-label">–î–∞—Ç–∞ –¥–æ</label>
                <input type="date" name="toDate" value="@Model.ToDate?.ToString("yyyy-MM-dd")" 
                       class="filter-input">
            </div>

            <div class="filter-group">
                <button type="submit" class="filter-btn">
                    üîç –ü–æ–∏—Å–∫
                </button>
            </div>
        </div>
    </form>

    <div class="orders-table">
        <div class="table-header">
            <h3 class="table-title">–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</h3>
            <div class="table-count">
                –ù–∞–π–¥–µ–Ω–æ: @Model.Orders.MetaData.TotalCount –∑–∞–∫–∞–∑–æ–≤
            </div>
        </div>

        @if (Model.Orders.Any())
        {
            <div class="table-wrapper">
                <table class="orders-grid">
                    <thead>
                        <tr>
                            <th>‚Ññ –ó–∞–∫–∞–∑–∞</th>
                            <th>–ö–ª–∏–µ–Ω—Ç</th>
                            <th>–î–∞—Ç–∞</th>
                            <th>–°—Ç–∞—Ç—É—Å</th>
                            <th>–°—É–º–º–∞</th>
                            <th>–¢–æ–≤–∞—Ä–æ–≤</th>
                            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model.Orders)
                        {
                            var totalAmount = order.OrderItems.Sum(oi => (oi.Product.DiscountPrice ?? oi.Product.Price) * oi.Quantity);
                            var itemsCount = order.OrderItems.Sum(oi => oi.Quantity);
                            
                            <tr>
                                <td>
                                    <div class="order-id">#@order.Id.ToString("N")[..8].ToUpper()</div>
                                </td>
                                <td>
                                    <div class="order-customer">@order.FirstName @order.LastName</div>
                                    <div style="font-size: 12px; color: #6c757d;">@order.Email</div>
                                </td>
                                <td>
                                    <div class="order-date">@order.OrderDate.ToString("dd.MM.yyyy HH:mm")</div>
                                </td>
                                <td>
                                    <span class="status-badge status-@order.OrderStatus.Name.ToLower().Replace(" ", "-")">
                                        @order.OrderStatus.Name
                                    </span>
                                </td>
                                <td>
                                    <div class="order-total">@totalAmount.ToString("N0") BYN</div>
                                </td>
                                <td>
                                    <div style="text-align: center;">@itemsCount</div>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <a href="@Url.Action("OrderDetails", "Admin", new { id = order.Id })" 
                                           class="action-btn action-btn-view">
                                            üëÅÔ∏è –î–µ—Ç–∞–ª–∏
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="pagination">
                <div class="pagination-info">
                    –ü–æ–∫–∞–∑–∞–Ω–æ @((Model.Orders.MetaData.CurrentPage - 1) * Model.Orders.MetaData.PageSize + 1) - 
                    @Math.Min(Model.Orders.MetaData.CurrentPage * Model.Orders.MetaData.PageSize, Model.Orders.MetaData.TotalCount) 
                    –∏–∑ @Model.Orders.MetaData.TotalCount –∑–∞–∫–∞–∑–æ–≤
                </div>

                <div class="pagination-links">
                    @if (Model.Orders.MetaData.HasPrevious)
                    {
                        <a href="@Url.Action("Orders", "Admin", new { 
                            pageNumber = Model.Orders.MetaData.CurrentPage - 1,
                            searchTerm = Model.SearchTerm,
                            statusId = Model.SelectedStatusId,
                            fromDate = Model.FromDate,
                            toDate = Model.ToDate
                        })" class="pagination-link">¬´ –ù–∞–∑–∞–¥</a>
                    }
                    else
                    {
                        <span class="pagination-link disabled">¬´ –ù–∞–∑–∞–¥</span>
                    }

                    @for (int i = Math.Max(1, Model.Orders.MetaData.CurrentPage - 2); 
                          i <= Math.Min(Model.Orders.MetaData.TotalPages, Model.Orders.MetaData.CurrentPage + 2); 
                          i++)
                    {
                        if (i == Model.Orders.MetaData.CurrentPage)
                        {
                            <span class="pagination-link active">@i</span>
                        }
                        else
                        {
                            <a href="@Url.Action("Orders", "Admin", new { 
                                pageNumber = i,
                                searchTerm = Model.SearchTerm,
                                statusId = Model.SelectedStatusId,
                                fromDate = Model.FromDate,
                                toDate = Model.ToDate
                            })" class="pagination-link">@i</a>
                        }
                    }

                    @if (Model.Orders.MetaData.HasNext)
                    {
                        <a href="@Url.Action("Orders", "Admin", new { 
                            pageNumber = Model.Orders.MetaData.CurrentPage + 1,
                            searchTerm = Model.SearchTerm,
                            statusId = Model.SelectedStatusId,
                            fromDate = Model.FromDate,
                            toDate = Model.ToDate
                        })" class="pagination-link">–í–ø–µ—Ä–µ–¥ ¬ª</a>
                    }
                    else
                    {
                        <span class="pagination-link disabled">–í–ø–µ—Ä–µ–¥ ¬ª</span>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-icon">üì¶</div>
                <div class="empty-state-text">–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                <div class="empty-state-subtext">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</div>
            </div>
        }
    </div>
</main>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const filters = document.querySelectorAll('.filter-input');
        filters.forEach(filter => {
            if (filter.type === 'date' || filter.tagName === 'SELECT') {
                filter.addEventListener('change', function() {
                    this.form.submit();
                });
            }
        });
        
        const tableRows = document.querySelectorAll('.orders-grid tbody tr');
        tableRows.forEach(row => {
            row.addEventListener('mouseenter', function() {
                this.style.backgroundColor = '#e3f2fd';
            });

            row.addEventListener('mouseleave', function() {
                this.style.backgroundColor = '';
            });
        });

        console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    });
</script>