@model GalleryVelvet.Domain.Entities.ProductEntity

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    .product-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        min-height: 100vh;
    }

    .product-images {
        position: relative;
        overflow: hidden;
    }

    .product-image {
        width: 100%;
        height: 100vh;
        object-fit: cover;
        opacity: 0;
        position: absolute;
        top: 0;
        left: 0;
        transition: opacity 0.8s ease;
    }

    .product-image.active {
        opacity: 1;
    }

    .image-indicators {
        position: absolute;
        right: 20px;
        top: 50%;
        transform: translateY(-50%);
        display: flex;
        flex-direction: column;
        gap: 10px;
        z-index: 10;
    }

    .image-indicator {
        width: 3px;
        height: 40px;
        background: rgba(255, 255, 255, 0.3);
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .image-indicator.active {
        background: rgba(255, 255, 255, 0.8);
    }
    
    .product-info {
        padding: 120px 60px 60px;
        background: #fff;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }

    .product-title {
        font-size: 24px;
        font-weight: 400;
        margin-bottom: 10px;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .product-price {
        font-size: 18px;
        font-weight: 300;
        margin-bottom: 8px;
    }

    .product-installment {
        font-size: 12px;
        color: #666;
        margin-bottom: 30px;
    }

    .product-color {
        margin-bottom: 30px;
    }

    .color-label {
        font-size: 12px;
        color: #666;
        margin-bottom: 10px;
    }

    .color-value {
        font-size: 14px;
        font-weight: 300;
    }
    
    .size-section {
        margin-bottom: 40px;
    }

    .size-label {
        font-size: 16px;
        font-weight: 400;
        margin-bottom: 15px;
    }

    .size-options {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }

    .size-option {
        width: 50px;
        height: 50px;
        border: 1px solid #e5e5e5;
        background: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 14px;
        font-weight: 300;
        transition: all 0.3s ease;
    }

    .size-option.active {
        border-color: #000;
        background: #000;
        color: #fff;
    }

    .size-option:hover {
        border-color: #000;
    }

    .size-guide {
        font-size: 12px;
        color: #666;
        text-decoration: underline;
        cursor: pointer;
    }
    
    .add-to-cart {
        width: 100%;
        padding: 15px;
        background: #000;
        color: #fff;
        border: none;
        font-size: 12px;
        text-transform: uppercase;
        letter-spacing: 1px;
        cursor: pointer;
        margin-bottom: 40px;
        transition: background 0.3s ease;
    }

    .add-to-cart:hover {
        background: #333;
    }
    
    .collapsible-section {
        border-top: 1px solid #e5e5e5;
        margin-bottom: 0;
    }

    .collapsible-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 0;
        cursor: pointer;
        background: none;
        border: none;
        width: 100%;
        text-align: left;
        font-size: 12px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-weight: 300;
    }

    .collapsible-content {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease;
        font-size: 13px;
        line-height: 1.6;
        color: #666;
    }

    .collapsible-content.open {
        max-height: 500px;
        padding-bottom: 20px;
    }

    .collapsible-icon {
        font-size: 16px;
        transition: transform 0.3s ease;
    }

    .collapsible-header.open .collapsible-icon {
        transform: rotate(45deg);
    }

    .size-chart {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
    }

    .size-chart th,
    .size-chart td {
        padding: 10px;
        text-align: center;
        border-bottom: 1px solid #f0f0f0;
        font-size: 12px;
    }

    .size-chart th {
        background: #f5f5f5;
        font-weight: 400;
    }

    .store-list {
        margin: 20px 0;
    }

    .store-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 0;
        border-bottom: 1px solid #f0f0f0;
    }

    .store-info {
        flex: 1;
    }

    .store-name {
        font-size: 12px;
        font-weight: 400;
        margin-bottom: 2px;
    }

    .store-address {
        font-size: 11px;
        color: #666;
        text-decoration: underline;
        margin-bottom: 2px;
    }

    .store-phone {
        font-size: 11px;
        color: #666;
    }

    .store-quantity {
        font-size: 14px;
        font-weight: 400;
        margin-right: 15px;
    }

    .store-reserve {
        font-size: 11px;
        color: #666;
        text-decoration: underline;
        cursor: pointer;
    }
    
    .product-features {
        margin: 15px 0;
    }

    .feature-item {
        display: flex;
        align-items: flex-start;
        margin-bottom: 8px;
        font-size: 13px;
        line-height: 1.4;
    }

    .feature-bullet {
        margin-right: 8px;
        margin-top: 6px;
        width: 4px;
        height: 4px;
        background: #000;
        border-radius: 50%;
        flex-shrink: 0;
    }
    
    .care-instructions {
        margin: 15px 0;
    }

    .care-item {
        font-size: 13px;
        margin-bottom: 5px;
        color: #666;
    }

    @@media (max-width: 1024px) {
    .product-info {
        padding: 100px 40px 40px;
    }
    }

    @@media (max-width: 768px) {
    .product-container {
        grid-template-columns: 1fr;
    }

    .product-images {
        height: 60vh;
    }

    .product-image {
        height: 60vh;
    }

    .product-info {
        padding: 30px 20px;
    }

    .nav-links {
        display: none;
    }

    .image-indicators {
        right: 15px;
    }

    .size-options {
        flex-wrap: wrap;
    }
    }
</style>

<div class="product-container">
    <div class="product-images" id="productImages">
        @if (Model.Images.Any())
        {
            @for (int i = 0; i < Model.Images.Count(); i++)
            {
                var img = Model.Images.ElementAt(i);
                <img src="@(string.IsNullOrWhiteSpace(img.Image) ? "/images/no-image_0.jpg" : $"data:image/{img.Format};base64,{img.Image}")"
                     alt="@Model.Name @(i + 1)"
                     class="product-image @(i == 0 ? "active" : "")"/>
            }
        }
        else
        {
            <img src="/images/no-image_0.jpg" alt="@Model.Name" class="product-image active" data-index="0" />
        }

        <div class="image-indicators">
            @for (int i = 0; i < Model.Images.Count(); i++)
            {
                <div class="image-indicator @(i == 0 ? "active" : "")" data-image="@i"></div>
            }
        </div>
    </div>

    <div class="product-info">
        <h1 class="product-title">@Model.Name</h1>
        <div class="product-price">
            @Html.Raw(
                Model.DiscountPrice.HasValue
                    ? $"<span style='text-decoration:line-through'>{Model.Price:N0} ₽</span> <span>{Model.DiscountPrice.Value:N0} BYN</span>"
                    : $"{Model.Price:N0} BYN"
            )
        </div>

        <div class="size-section">
            <div class="size-label">Размер</div>
            <div class="size-options">
                @if (Model.ProductSizes.Any())
                {
                    for (int i = 0; i < Model.ProductSizes.Count; ++i)
                    {
                        var size = Model.ProductSizes.ElementAt(i);
                        
                        <button type="button"
                                class="size-option @(i == 0 ? "active" : "")"
                                data-size-id="@size.SizeId">
                            @size.Size.Label
                        </button>
                    }
                }
                else
                {
                    <button type="button"
                            class="size-option active"
                            data-size-id="00000000-0000-0000-0000-000000000000">
                        ONE SIZE
                    </button>
                }
            </div>
        </div>

        <button class="add-to-cart"
                data-product-id="@Model.Id">
            В КОРЗИНУ
        </button>
        
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="collapsible-section">
                <button class="collapsible-header" onclick="toggleCollapsible(this)">
                    ОПИСАНИЕ ТОВАРА
                    <span class="collapsible-icon">+</span>
                </button>
                <div class="collapsible-content">
                    <p>@Html.Raw(Model.Description.Replace("\n", "<br/>"))</p>
                </div>
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(Model.CompositionAndCare))
        {
            <div class="collapsible-section">
                <button class="collapsible-header" onclick="toggleCollapsible(this)">
                    СОСТАВ И УХОД
                    <span class="collapsible-icon">+</span>
                </button>
                <div class="collapsible-content">
                    <p>@Html.Raw(Model.CompositionAndCare.Replace("\n", "<br/>"))</p>
                </div>
            </div>
        }
    </div>
</div>

<script>
    let selectedSizeId = null;

    document.querySelectorAll('.size-option').forEach(btn => {
        btn.addEventListener('click', function () {
            document.querySelectorAll('.size-option').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            selectedSizeId = this.dataset.sizeId;
        });

        if (btn.classList.contains('active')) {
            selectedSizeId = btn.dataset.sizeId;
        }
    });

    document.querySelector('.add-to-cart')?.addEventListener('click', function () {
        const productId = this.dataset.productId;
        const quantity = 1;

        if (!selectedSizeId) {
            alert("Пожалуйста, выберите размер.");
            return;
        }
        
        window.location.href = `/Cart/AddToCart?productId=${productId}&sizeId=${selectedSizeId}&quantity=${quantity}`;
    });
    
        let currentImageIndex = 0;
        const images = document.querySelectorAll('.product-image');
        const indicators = document.querySelectorAll('.image-indicator');

        function showImage(index) {
            images.forEach((img, i) => {
                img.classList.toggle('active', i === index);
            });
            indicators.forEach((indicator, i) => {
                indicator.classList.toggle('active', i === index);
            });
            currentImageIndex = index;
        }
        
        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => showImage(index));
        });

        let autoScrollTimeout;

        function handleScroll() {
            clearTimeout(autoScrollTimeout);
            autoScrollTimeout = setTimeout(() => {
                const scrollProgress = window.scrollY / (document.body.scrollHeight - window.innerHeight);
                const newIndex = Math.floor(scrollProgress * images.length);
                const clampedIndex = Math.min(Math.max(newIndex, 0), images.length - 1);
                
                if (clampedIndex !== currentImageIndex) {
                    showImage(clampedIndex);
                }
            }, 50);
        }

        window.addEventListener('scroll', handleScroll);

        document.querySelectorAll('.size-option').forEach(option => {
            option.addEventListener('click', function() {
                document.querySelectorAll('.size-option').forEach(opt => opt.classList.remove('active'));
                this.classList.add('active');
                
                document.querySelector('.size-label').textContent = this.textContent;
            });
        });
        
        function toggleCollapsible(header) {
            const content = header.nextElementSibling;
            const icon = header.querySelector('.collapsible-icon');
            
            const isOpen = header.classList.contains('open');

            document.querySelectorAll('.collapsible-header').forEach(h => {
                h.classList.remove('open');
                h.nextElementSibling.classList.remove('open');
                h.querySelector('.collapsible-icon').textContent = '+';
            });
            
            if (!isOpen) {
                header.classList.add('open');
                content.classList.add('open');
                icon.textContent = '−';
            }
        }
        
        document.querySelector('.add-to-cart').addEventListener('click', function() {
            this.style.transform = 'scale(0.98)';
            this.textContent = 'ДОБАВЛЕНО В КОРЗИНУ';
            
            setTimeout(() => {
                this.style.transform = 'scale(1)';
            }, 150);
            
            setTimeout(() => {
                this.textContent = 'В КОРЗИНУ';
            }, 2000);
        });
        
        let startY = 0;
        let endY = 0;

        const productImages = document.getElementById('productImages');

        productImages.addEventListener('touchstart', e => {
            startY = e.touches[0].clientY;
        });

        productImages.addEventListener('touchend', e => {
            endY = e.changedTouches[0].clientY;
            handleImageSwipe();
        });

        function handleImageSwipe() {
            const threshold = 50;
            const diff = startY - endY;

            if (Math.abs(diff) > threshold) {
                if (diff > 0 && currentImageIndex < images.length - 1) {
                    showImage(currentImageIndex + 1);
                } else if (diff < 0 && currentImageIndex > 0) {
                    showImage(currentImageIndex - 1);
                }
            }
        }
        
        document.addEventListener('keydown', function(e) {
            if (e.key === 'ArrowUp' && currentImageIndex > 0) {
                e.preventDefault();
                showImage(currentImageIndex - 1);
            } else if (e.key === 'ArrowDown' && currentImageIndex < images.length - 1) {
                e.preventDefault();
                showImage(currentImageIndex + 1);
            }
        });
        
        document.addEventListener('DOMContentLoaded', function() {
            showImage(0);
            
            const productInfo = document.querySelector('.product-info');
            productInfo.style.opacity = '0';
            productInfo.style.transform = 'translateY(30px)';
            
            setTimeout(() => {
                productInfo.style.transition = 'opacity 0.8s ease, transform 0.8s ease';
                productInfo.style.opacity = '1';
                productInfo.style.transform = 'translateY(0)';
            }, 300);
        });
        
        function throttle(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            }
        }
        
        window.addEventListener('scroll', throttle(() => {
            handleScroll();
        }, 16));

</script>